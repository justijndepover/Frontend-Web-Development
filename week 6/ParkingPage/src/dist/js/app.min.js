function NoParkingSpotsException(a){this.name="NoParkingSpotsException",this.message=a,this.stack=(new Error).stack}function Parking(a,t,i,n,r){this.name=a,this.description=t,this.address=i,this.availableCapacity=n,this.totalCapacity=r}var config={url:"http://localhost:63342/ParkingPage/src/data/Parkings.json",localUrl:"http://localhost:63342/ParkingPage/src/data/Parkings.json",warningTreshold:30};NoParkingSpotsException.prototype=Object.create(Error.prototype),NoParkingSpotsException.prototype.constructor=NoParkingSpotsException;var parkingService=function(){"use strict";return{get:function(){var a=new XMLHttpRequest;if(a.open("GET",config.url,!1),a.send(null),200===a.status){for(var t=JSON.parse(a.responseText),i=[],n=0,r=t.Parkings.parkings.length;r>n;n++){var s=t.Parkings.parkings[n],o=new Parking(s.name,s.description,s.address,s.availableCapacity,s.totalCapacity);i.push(o)}return i}},getById:function(){}}}(),vm={parkingSpots:null,showParkingSpots:function(a){if(!this.parkingSpots||"object"!=typeof this.parkingSpots)throw new NoParkingSpotsException("No parkingspots defined");for(var t=document.querySelector(a),i="",n=0,r=this.parkingSpots.length;r>n;n++){var s=this.parkingSpots[n],o=0,p="parking";""===s.availableCapacity&&(s.availableCapacity=0),s.availableCapacity>0&&(o=(s.availableCapacity/s.totalCapacity*100).toFixed(2)),0===o?p+=" parking-full":o<config.warningTreshold&&(p+=" parking-warning"),i+='<li class="'+p+'">',i+='<p class="parking-sign">P</p>',i+='<p class="parking-description">'+s.description+"</p>",i+='<p class="parking-stats">'+s.availableCapacity+"/"+s.totalCapacity+"</p>",i+="</li>"}t.innerHTML=i}};!function(){vm.parkingSpots=parkingService.get(),vm.showParkingSpots("#parkingSpots")}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5vUGFya2luZ1Nwb3RzRXhjZXB0aW9uLmpzIiwiUGFya2luZy5qcyIsImNvbmZpZy5qcyIsInBhcmtpbmdTZXJ2aWNlLmpzIiwiUGFya2luZ092ZXJ2aWV3Vmlld01vZGVsLmpzIiwiYXBwLmpzIl0sIm5hbWVzIjpbIk5vUGFya2luZ1Nwb3RzRXhjZXB0aW9uIiwibWVzc2FnZSIsInRoaXMiLCJuYW1lIiwic3RhY2siLCJFcnJvciIsIlBhcmtpbmciLCJkZXNjcmlwdGlvbiIsImFkZHJlc3MiLCJhdmFpbGFibGVDYXBhY2l0eSIsInRvdGFsQ2FwYWNpdHkiLCJjb25maWciLCJ1cmwiLCJsb2NhbFVybCIsIndhcm5pbmdUcmVzaG9sZCIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwicGFya2luZ1NlcnZpY2UiLCJnZXQiLCJ4bWxIdHRwIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2VuZCIsInN0YXR1cyIsImRhdGEiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJwYXJraW5ncyIsImkiLCJsIiwiUGFya2luZ3MiLCJsZW5ndGgiLCJvIiwibmV3UCIsInB1c2giLCJnZXRCeUlkIiwidm0iLCJwYXJraW5nU3BvdHMiLCJzaG93UGFya2luZ1Nwb3RzIiwiZWxlbWVudFNlbGVjdG9yIiwiZWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImJvYlRoZUh0bWxCdWlsZGVyIiwicCIsInBlcmMiLCJwYXJraW5nQ2xhc3MiLCJ0b0ZpeGVkIiwiaW5uZXJIVE1MIl0sIm1hcHBpbmdzIjoiQUFLQSxRQUFBQSx5QkFBQUMsR0FFQUMsS0FBQUMsS0FBQSwwQkFDQUQsS0FBQUQsUUFBQUEsRUFDQUMsS0FBQUUsT0FBQSxHQUFBQyxRQUFBRCxNQ0pBLFFBQUFFLFNBQUFILEVBQUFJLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0FSLEtBQUFDLEtBQUFBLEVBQ0FELEtBQUFLLFlBQUFBLEVBQ0FMLEtBQUFNLFFBQUFBLEVBQ0FOLEtBQUFPLGtCQUFBQSxFQUNBUCxLQUFBUSxjQUFBQSxFQ05BLEdBQUFDLFNBQ0FDLElBQUEsNERBQ0FDLFNBQUEsNERBQ0FDLGdCQUFBLEdGTUFkLHlCQUFBZSxVQUFBQyxPQUFBQyxPQUFBWixNQUFBVSxXQUNBZix3QkFBQWUsVUFBQUcsWUFBQWxCLHVCR1RBLElBQUFtQixnQkFBQSxXQUNBLFlBS0EsUUFDQUMsSUFBQSxXQUdBLEdBQUFDLEdBQUEsR0FBQUMsZUFJQSxJQUhBRCxFQUFBRSxLQUFBLE1BQUFaLE9BQUFDLEtBQUEsR0FDQVMsRUFBQUcsS0FBQSxNQUVBLE1BQUFILEVBQUFJLE9BQUEsQ0FJQSxJQUFBLEdBSEFDLEdBQUFDLEtBQUFDLE1BQUFQLEVBQUFRLGNBQ0FDLEtBRUFDLEVBQUEsRUFBQUMsRUFBQU4sRUFBQU8sU0FBQUgsU0FBQUksT0FBQUYsRUFBQUQsRUFBQUEsSUFBQSxDQUNBLEdBQUFJLEdBQUFULEVBQUFPLFNBQUFILFNBQUFDLEdBQ0FLLEVBQUEsR0FBQTlCLFNBQ0E2QixFQUFBaEMsS0FDQWdDLEVBQUE1QixZQUNBNEIsRUFBQTNCLFFBQ0EyQixFQUFBMUIsa0JBQ0EwQixFQUFBekIsY0FHQW9CLEdBQUFPLEtBQUFELEdBR0EsTUFBQU4sS0FHQVEsUUFBQSxpQkNsQ0FDLElBQ0FDLGFBQUEsS0FDQUMsaUJBQUEsU0FBQUMsR0FFQSxJQUFBeEMsS0FBQXNDLGNBQUEsZ0JBQUF0QyxNQUFBLGFBQ0EsS0FBQSxJQUFBRix5QkFBQSwwQkFNQSxLQUFBLEdBSEEyQyxHQUFBQyxTQUFBQyxjQUFBSCxHQUNBSSxFQUFBLEdBRUFmLEVBQUEsRUFBQUMsRUFBQTlCLEtBQUFzQyxhQUFBTixPQUFBRixFQUFBRCxFQUFBQSxJQUFBLENBQ0EsR0FBQWdCLEdBQUE3QyxLQUFBc0MsYUFBQVQsR0FDQWlCLEVBQUEsRUFDQUMsRUFBQSxTQUNBLE1BQUFGLEVBQUF0QyxvQkFDQXNDLEVBQUF0QyxrQkFBQSxHQUdBc0MsRUFBQXRDLGtCQUFBLElBQ0F1QyxHQUFBRCxFQUFBdEMsa0JBQUFzQyxFQUFBckMsY0FBQSxLQUFBd0MsUUFBQSxJQUdBLElBQUFGLEVBQ0FDLEdBQUEsZ0JBQ0FELEVBQUFyQyxPQUFBRyxrQkFDQW1DLEdBQUEsb0JBR0FILEdBQUEsY0FBQUcsRUFBQSxLQUNBSCxHQUFBLGdDQUNBQSxHQUFBLGtDQUFBQyxFQUFBeEMsWUFBQSxPQUNBdUMsR0FBQSw0QkFBQUMsRUFBQXRDLGtCQUFBLElBQUFzQyxFQUFBckMsY0FBQSxPQUNBb0MsR0FBQSxRQUdBSCxFQUFBUSxVQUFBTCxLQ3JDQSxXQUNBUCxHQUFBQyxhQUFBckIsZUFBQUMsTUFDQW1CLEdBQUFFLGlCQUFBIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkganVzdGlqbmRlcG92ZXIgb24gMjcvMTAvMTUuXG4gKi9cblxuXG5mdW5jdGlvbiBOb1BhcmtpbmdTcG90c0V4Y2VwdGlvbihtZXNzYWdlKXtcblxuICAgIHRoaXMubmFtZSA9IFwiTm9QYXJraW5nU3BvdHNFeGNlcHRpb25cIjtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xuXG59XG5cbk5vUGFya2luZ1Nwb3RzRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbk5vUGFya2luZ1Nwb3RzRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE5vUGFya2luZ1Nwb3RzRXhjZXB0aW9uOyIsIi8qKlxuICogQ3JlYXRlZCBieSBqdXN0aWpuZGVwb3ZlciBvbiAyNy8xMC8xNS5cbiAqL1xuXG5cbmZ1bmN0aW9uIFBhcmtpbmcobmFtZSwgZGVzY3JpcHRpb24sIGFkZHJlc3MsIGF2YWlsYWJsZUNhcGFjaXR5LCB0b3RhbENhcGFjaXR5KXtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgIHRoaXMuYXZhaWxhYmxlQ2FwYWNpdHkgPSBhdmFpbGFibGVDYXBhY2l0eTtcbiAgICB0aGlzLnRvdGFsQ2FwYWNpdHkgPSB0b3RhbENhcGFjaXR5O1xuXG5cbn0iLCIvKipcbiAqIENyZWF0ZWQgYnkganVzdGlqbmRlcG92ZXIgb24gMjcvMTAvMTUuXG4gKi9cblxudmFyIGNvbmZpZyA9IHtcbiAgICB1cmw6XCJodHRwOi8vbG9jYWxob3N0OjYzMzQyL1BhcmtpbmdQYWdlL3NyYy9kYXRhL1BhcmtpbmdzLmpzb25cIixcbiAgICBsb2NhbFVybDogXCJodHRwOi8vbG9jYWxob3N0OjYzMzQyL1BhcmtpbmdQYWdlL3NyYy9kYXRhL1BhcmtpbmdzLmpzb25cIixcbiAgICB3YXJuaW5nVHJlc2hvbGQ6IDMwXG59OyIsIi8qKlxuICogQ3JlYXRlZCBieSBqdXN0aWpuZGVwb3ZlciBvbiAyNy8xMC8xNS5cbiAqL1xuXG5cbnZhciBwYXJraW5nU2VydmljZSA9IChmdW5jdGlvbigpe1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8vcHJpdmF0ZVxuXG4gICAgLy9wdWJsaWMgYXBpXG4gICAgcmV0dXJue1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvLyQuZ2V0SlNPTlxuXG4gICAgICAgICAgICB2YXIgeG1sSHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgeG1sSHR0cC5vcGVuKFwiR0VUXCIsIGNvbmZpZy51cmwsIGZhbHNlKTtcbiAgICAgICAgICAgIHhtbEh0dHAuc2VuZChudWxsKTtcblxuICAgICAgICAgICAgaWYoeG1sSHR0cC5zdGF0dXMgPT09IDIwMCl7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHhtbEh0dHAucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICB2YXIgcGFya2luZ3MgPSBbXTtcblxuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDAsIGwgPSBkYXRhLlBhcmtpbmdzLnBhcmtpbmdzLmxlbmd0aDsgaSA8IGw7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvID0gZGF0YS5QYXJraW5ncy5wYXJraW5nc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1AgPSBuZXcgUGFya2luZyhcbiAgICAgICAgICAgICAgICAgICAgICAgIG8ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBvLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBvLmF2YWlsYWJsZUNhcGFjaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgby50b3RhbENhcGFjaXR5XG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgcGFya2luZ3MucHVzaChuZXdQKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcGFya2luZ3M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdldEJ5SWQ6IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgfVxuICAgIH07XG59KSgpOyIsIi8qKlxuICogQ3JlYXRlZCBieSBqdXN0aWpuZGVwb3ZlciBvbiAyNy8xMC8xNS5cbiAqL1xuXG5cbnZhciB2bSA9IHtcbiAgICBwYXJraW5nU3BvdHM6IG51bGwsXG4gICAgc2hvd1BhcmtpbmdTcG90czogZnVuY3Rpb24oZWxlbWVudFNlbGVjdG9yKXtcblxuICAgICAgICBpZighdGhpcy5wYXJraW5nU3BvdHMgfHwgdHlwZW9mKHRoaXMucGFya2luZ1Nwb3RzKSAhPT0gXCJvYmplY3RcIil7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTm9QYXJraW5nU3BvdHNFeGNlcHRpb24oXCJObyBwYXJraW5nc3BvdHMgZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50U2VsZWN0b3IpO1xuICAgICAgICB2YXIgYm9iVGhlSHRtbEJ1aWxkZXIgPSBcIlwiO1xuXG4gICAgICAgIGZvcih2YXIgaSA9IDAsIGwgPSB0aGlzLnBhcmtpbmdTcG90cy5sZW5ndGg7IGkgPCBsOyBpKyspe1xuICAgICAgICAgICAgdmFyIHAgPSB0aGlzLnBhcmtpbmdTcG90c1tpXTtcbiAgICAgICAgICAgIHZhciBwZXJjID0gMDtcbiAgICAgICAgICAgIHZhciBwYXJraW5nQ2xhc3MgPSBcInBhcmtpbmdcIjtcbiAgICAgICAgICAgIGlmKHAuYXZhaWxhYmxlQ2FwYWNpdHkgPT09IFwiXCIpe1xuICAgICAgICAgICAgICAgIHAuYXZhaWxhYmxlQ2FwYWNpdHkgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihwLmF2YWlsYWJsZUNhcGFjaXR5PjApe1xuICAgICAgICAgICAgICAgIHBlcmMgPSAoKHAuYXZhaWxhYmxlQ2FwYWNpdHkgLyBwLnRvdGFsQ2FwYWNpdHkpICogMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihwZXJjID09PSAwKXtcbiAgICAgICAgICAgICAgICBwYXJraW5nQ2xhc3MgKz0gXCIgcGFya2luZy1mdWxsXCI7XG4gICAgICAgICAgICB9ZWxzZSBpZihwZXJjIDwgY29uZmlnLndhcm5pbmdUcmVzaG9sZCl7XG4gICAgICAgICAgICAgICAgcGFya2luZ0NsYXNzICs9IFwiIHBhcmtpbmctd2FybmluZ1wiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBib2JUaGVIdG1sQnVpbGRlciArPSAnPGxpIGNsYXNzPVwiJysgcGFya2luZ0NsYXNzICsnXCI+JztcbiAgICAgICAgICAgIGJvYlRoZUh0bWxCdWlsZGVyICs9ICc8cCBjbGFzcz1cInBhcmtpbmctc2lnblwiPlA8L3A+JztcbiAgICAgICAgICAgIGJvYlRoZUh0bWxCdWlsZGVyICs9ICc8cCBjbGFzcz1cInBhcmtpbmctZGVzY3JpcHRpb25cIj4nKyBwLmRlc2NyaXB0aW9uICsgJzwvcD4nO1xuICAgICAgICAgICAgYm9iVGhlSHRtbEJ1aWxkZXIgKz0gJzxwIGNsYXNzPVwicGFya2luZy1zdGF0c1wiPicrIHAuYXZhaWxhYmxlQ2FwYWNpdHkgKyAnLycgKyBwLnRvdGFsQ2FwYWNpdHkgKyAnPC9wPic7XG4gICAgICAgICAgICBib2JUaGVIdG1sQnVpbGRlciArPSAnPC9saT4nO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBib2JUaGVIdG1sQnVpbGRlcjtcblxuICAgIH1cbn07XG5cbi8vZmFsc3kgdGhydXRoeVxuLy9mYWxzeTogbnVsbCwgdW5kZWZpbmVkLCBcIlwiLCBmYWxzZSIsIi8qKlxuICogQ3JlYXRlZCBieSBqdXN0aWpuZGVwb3ZlciBvbiAyNy8xMC8xNS5cbiAqL1xuXG4oZnVuY3Rpb24oKXtcbiAgICB2bS5wYXJraW5nU3BvdHMgPSBwYXJraW5nU2VydmljZS5nZXQoKTtcbiAgICB2bS5zaG93UGFya2luZ1Nwb3RzKFwiI3BhcmtpbmdTcG90c1wiKTtcbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
